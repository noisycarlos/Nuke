import nuke
def nodePresetsStartup():
  nuke.setUserPreset("Crop", "Letterbox UHD 2.0", {'box': '0 120 3840 2040', 'selected': 'true'})
  nuke.setUserPreset("Group7719682074798230515", "Half Default", {'Child-1 help': 'Adds synthetic grain. Push "presets" to get predefined types of grain, these are the correct size for 2K scans.\n\nYou can also adjust the sliders to match a sample piece of grain. Find a sample with a rather constant background, blur it to remove the grain, and use as input to this. View with a wipe in the viewer so you can make a match. It helps to view and match each of the red, green, blue separately.', 'Child-1 label': 'Kodak 5248', 'Child-1 selected': 'true', 'Child-1 red_m': '0.208', 'Child-1 green_m': '0.23', 'Child-1 blue_m': '0.425', 'Child-1 black': '0 0 0', 'Child-1 minimum': '0 0 0', 'Child0 channels': 'rgb', 'Child0 maskChannelInput': 'rgba.alpha', 'Child2 expr0': 'max(minimum.r,r+(2*Ar-1)*(r*red_m+black.r))', 'Child2 expr1': 'max(minimum.g,g+(2*Ag-1)*(g*green_m+black.g))', 'Child2 expr2': 'max(minimum.b,b+(2*Ab-1)*(b*blue_m+black.b))', 'Child3 output': 'rgba.red -rgba.green -rgba.blue -rgba.alpha', 'Child3 size': '{parent.red_size.w} {parent.red_size.h}', 'Child3 zoffset': '{frame+seed+red_i/2}', 'Child3 xrotate': '{red_i*45}', 'Child3 yrotate': '{red_i*45}', 'Child5 which': '{maskgrain}'})
  nuke.setUserPreset("Group7719682074798230515", "Third Default", {'Child-1 help': 'Adds synthetic grain. Push "presets" to get predefined types of grain, these are the correct size for 2K scans.\n\nYou can also adjust the sliders to match a sample piece of grain. Find a sample with a rather constant background, blur it to remove the grain, and use as input to this. View with a wipe in the viewer so you can make a match. It helps to view and match each of the red, green, blue separately.', 'Child-1 label': 'Kodak 5248', 'Child-1 selected': 'true', 'Child-1 red_m': '0.1386666667', 'Child-1 green_m': '0.1533333333', 'Child-1 blue_m': '0.2833333333', 'Child0 channels': 'rgb', 'Child0 maskChannelInput': 'rgba.alpha', 'Child2 expr0': 'max(minimum.r,r+(2*Ar-1)*(r*red_m+black.r))', 'Child2 expr1': 'max(minimum.g,g+(2*Ag-1)*(g*green_m+black.g))', 'Child2 expr2': 'max(minimum.b,b+(2*Ab-1)*(b*blue_m+black.b))', 'Child3 output': 'rgba.red -rgba.green -rgba.blue -rgba.alpha', 'Child3 size': '{parent.red_size.w} {parent.red_size.h}', 'Child3 zoffset': '{frame+seed+red_i/2}', 'Child3 xrotate': '{red_i*45}', 'Child3 yrotate': '{red_i*45}', 'Child5 which': '{maskgrain}'})
  nuke.setUserPreset("Merge2", "mask", {'operation': 'mask', 'selected': 'true'})
  nuke.setUserPreset("Merge2", "stencil", {'operation': 'stencil', 'selected': 'true'})
  nuke.setUserPreset("Write", "DPX", {'channels': 'rgba', 'file': 'K:/Tower33/BA/201/Outputs/Finals/BA_201_007_010_v001.####.exr', 'colorspace': 'compositing_log', 'file_type': 'exr', 'checkHashOnRead': 'false', 'version': '71', 'in_colorspace': 'scene_linear', 'out_colorspace': 'compositing_log', 'beforeRender': "f = os.path.split(nuke.thisNode().knob('file').value())[0]; os.makedirs(f) if not os.path.exists(f) else None", 'selected': 'true', 'suffix': '.####.dpx', 'script_subfolders': '1'})
  nuke.setUserPreset("Write", "EXR", {'channels': 'rgba', 'file': 'K:/Tower33/BA/201/Outputs/Finals/BA_201_007_010_v001.####.exr', 'colorspace': 'compositing_log', 'file_type': 'exr', 'checkHashOnRead': 'false', 'version': '71', 'in_colorspace': 'scene_linear', 'out_colorspace': 'compositing_log', 'beforeRender': "f = os.path.split(nuke.thisNode().knob('file').value())[0]; os.makedirs(f) if not os.path.exists(f) else None", 'selected': 'true', 'suffix': '.####.exr', 'script_subfolders': '1'})
